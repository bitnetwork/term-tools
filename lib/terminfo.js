const fs = require("fs");

class Terminfo {
  constructor(name = process.env.TERM, path = "/usr/share/terminfo/") {
    let buffer;
    
    try {
      buffer = fs.readFileSync(path + name[0] + "/" + name);
    } catch (error) {
      throw new Error("Terminal capibilites not found in database");
    }
    
    let offset = 0;
    let definitions = {
      boolean: [
        "autoLeftMargin",
        "autoRightMargin",
        "noEscCtrlc",
        "ceolStandoutGlitch",
        "eatNewlineGlitch",
        "eraseOverstrike",
        "genericType",
        "hardCopy",
        "hasMetaKey",
        "hasStatusLine",
        "insertNullGlitch",
        "memoryAbove",
        "memoryBelow",
        "moveInsertMode",
        "moveStandoutMode",
        "overStrike",
        "statusLineEscOk",
        "destTabsMagicSmso",
        "tildeGlitch",
        "transparentUnderline",
        "xonXoff",
        "needsXonXoff",
        "prtrSilent",
        "hardCursor",
        "nonRevRmcup",
        "noPadChar"
      ],
      number: [
        "columns",
        "initTabs",
        "lines",
        "linesOfMemory",
        "magicCookieGlitch",
        "paddingBaudRate",
        "virtualTerminal",
        "widthStatusLine",
        "numLabels",
        "labelHeight",
        "labelWidth",
        "maxAttributes",
        "maximumWindows",
        "maxColors",
        "maxPairs",
        "noColorVideo",
        "bufferCapacity",
        "dotVertSpacing",
        "dotHorzSpacing",
        "maxMicroAddress",
        "maxMicroJump",
        "microColSize",
        "microLineSize",
        "numberOfPins",
        "outputResChar",
        "outputResLine",
        "outputResHorzInch",
        "outputResVertInch",
        "printRate",
        "wideCharSize",
        "buttons",
        "bitImageEntwining",
        "bitImageType"
      ],
      string: [
        "backTab",
        "bell",
        "carriageReturn",
        "changeScrollRegion",
        "clearAllTabs",
        "clearScreen",
        "clrEol",
        "clrEos",
        "columnAddress",
        "commandCharacter",
        "cursorAddress",
        "cursorDown",
        "cursorHome",
        "cursorInvisible",
        "cursorLeft",
        "cursorMemAddress",
        "cursorNormal",
        "cursorRight",
        "cursorToLl",
        "cursorUp",
        "cursorVisible",
        "deleteCharacter",
        "deleteLine",
        "disStatusLine",
        "downHalfLine",
        "enterAltCharsetMode",
        "enterBlinkMode",
        "enterBoldMode",
        "enterCaMode",
        "enterDeleteMode",
        "enterDimMode",
        "enterInsertMode",
        "enterSecureMode",
        "enterProtectedMode",
        "enterReverseMode",
        "enterStandoutMode",
        "enterUnderlineMode",
        "eraseChars",
        "exitAltCharsetMode",
        "exitAttributeMode",
        "exitCaMode",
        "exitDeleteMode",
        "exitInsertMode",
        "exitStandoutMode",
        "exitUnderlineMode",
        "flashScreen",
        "formFeed",
        "fromStatusLine",
        "init1string",
        "init2string",
        "init3string",
        "initFile",
        "insertCharacter",
        "insertLine",
        "insertPadding",
        "keyBackspace",
        "keyCatab",
        "keyClear",
        "keyCtab",
        "keyDc",
        "keyDl",
        "keyDown",
        "keyEic",
        "keyEol",
        "keyEos",
        "keyF0",
        "keyF1",
        "keyF10",
        "keyF2",
        "keyF3",
        "keyF4",
        "keyF5",
        "keyF6",
        "keyF7",
        "keyF8",
        "keyF9",
        "keyHome",
        "keyIc",
        "keyIl",
        "keyLeft",
        "keyLl",
        "keyNpage",
        "keyPpage",
        "keyRight",
        "keySf",
        "keySr",
        "keyStab",
        "keyUp",
        "keypadLocal",
        "keypadXmit",
        "labF0",
        "labF1",
        "labF10",
        "labF2",
        "labF3",
        "labF4",
        "labF5",
        "labF6",
        "labF7",
        "labF8",
        "labF9",
        "metaOff",
        "metaOn",
        "newline",
        "padChar",
        "parmDch",
        "parmDeleteLine",
        "parmDownCursor",
        "parmIch",
        "parmIndex",
        "parmInsertLine",
        "parmLeftCursor",
        "parmRightCursor",
        "parmRindex",
        "parmUpCursor",
        "pkeyKey",
        "pkeyLocal",
        "pkeyXmit",
        "printScreen",
        "prtrOff",
        "prtrOn",
        "repeatChar",
        "reset1string",
        "reset2string",
        "reset3string",
        "resetFile",
        "restoreCursor",
        "rowAddress",
        "saveCursor",
        "scrollForward",
        "scrollReverse",
        "setAttributes",
        "setTab",
        "setWindow",
        "tab",
        "toStatusLine",
        "underlineChar",
        "upHalfLine",
        "initProg",
        "keyA1",
        "keyA3",
        "keyB2",
        "keyC1",
        "keyC3",
        "prtrNon",
        "charPadding",
        "acsChars",
        "plabNorm",
        "keyBtab",
        "enterXonMode",
        "exitXonMode",
        "enterAmMode",
        "exitAmMode",
        "xonCharacter",
        "xoffCharacter",
        "enaAcs",
        "labelOn",
        "labelOff",
        "keyBeg",
        "keyCancel",
        "keyClose",
        "keyCommand",
        "keyCopy",
        "keyCreate",
        "keyEnd",
        "keyEnter",
        "keyExit",
        "keyFind",
        "keyHelp",
        "keyMark",
        "keyMessage",
        "keyMove",
        "keyNext",
        "keyOpen",
        "keyOptions",
        "keyPrevious",
        "keyPrint",
        "keyRedo",
        "keyReference",
        "keyRefresh",
        "keyReplace",
        "keyRestart",
        "keyResume",
        "keySave",
        "keySuspend",
        "keyUndo",
        "keySbeg",
        "keyScancel",
        "keyScommand",
        "keyScopy",
        "keyScreate",
        "keySdc",
        "keySdl",
        "keySelect",
        "keySend",
        "keySeol",
        "keySexit",
        "keySfind",
        "keyShelp",
        "keyShome",
        "keySic",
        "keySleft",
        "keySmessage",
        "keySmove",
        "keySnext",
        "keySoptions",
        "keySprevious",
        "keySprint",
        "keySredo",
        "keySreplace",
        "keySright",
        "keySrsume",
        "keySsave",
        "keySsuspend",
        "keySundo",
        "reqForInput",
        "keyF11",
        "keyF12",
        "keyF13",
        "keyF14",
        "keyF15",
        "keyF16",
        "keyF17",
        "keyF18",
        "keyF19",
        "keyF20",
        "keyF21",
        "keyF22",
        "keyF23",
        "keyF24",
        "keyF25",
        "keyF26",
        "keyF27",
        "keyF28",
        "keyF29",
        "keyF30",
        "keyF31",
        "keyF32",
        "keyF33",
        "keyF34",
        "keyF35",
        "keyF36",
        "keyF37",
        "keyF38",
        "keyF39",
        "keyF40",
        "keyF41",
        "keyF42",
        "keyF43",
        "keyF44",
        "keyF45",
        "keyF46",
        "keyF47",
        "keyF48",
        "keyF49",
        "keyF50",
        "keyF51",
        "keyF52",
        "keyF53",
        "keyF54",
        "keyF55",
        "keyF56",
        "keyF57",
        "keyF58",
        "keyF59",
        "keyF60",
        "keyF61",
        "keyF62",
        "keyF63",
        "clrBol",
        "clearMargins",
        "setLeftMargin",
        "setRightMargin",
        "labelFormat",
        "setClock",
        "displayClock",
        "removeClock",
        "createWindow",
        "gotoWindow",
        "hangup",
        "dialPhone",
        "quickDial",
        "tone",
        "pulse",
        "flashHook",
        "fixedPause",
        "waitTone",
        "user0",
        "user1",
        "user2",
        "user3",
        "user4",
        "user5",
        "user6",
        "user7",
        "user8",
        "user9",
        "origPair",
        "origColors",
        "initializeColor",
        "initializePair",
        "setColorPair",
        "setForeground",
        "setBackground",
        "changeCharPitch",
        "changeLinePitch",
        "changeResHorz",
        "changeResVert",
        "defineChar",
        "enterDoublewideMode",
        "enterDraftQuality",
        "enterItalicsMode",
        "enterLeftwardMode",
        "enterMicroMode",
        "enterNearLetterQuality",
        "enterNormalQuality",
        "enterShadowMode",
        "enterSubscriptMode",
        "enterSuperscriptMode",
        "enterUpwardMode",
        "exitDoublewideMode",
        "exitItalicsMode",
        "exitLeftwardMode",
        "exitMicroMode",
        "exitShadowMode",
        "exitSubscriptMode",
        "exitSuperscriptMode",
        "exitUpwardMode",
        "microColumnAddress",
        "microDown",
        "microLeft",
        "microRight",
        "microRowAddress",
        "microUp",
        "orderOfPins",
        "parmDownMicro",
        "parmLeftMicro",
        "parmRightMicro",
        "parmUpMicro",
        "selectCharSet",
        "setBottomMargin",
        "setBottomMarginParm",
        "setLeftMarginParm",
        "setRightMarginParm",
        "setTopMargin",
        "setTopMarginParm",
        "startBitImage",
        "startCharSetDef",
        "stopBitImage",
        "stopCharSetDef",
        "subscriptCharacters",
        "superscriptCharacters",
        "theseCauseCr",
        "zeroMotion",
        "charSetNames",
        "keyMouse",
        "mouseInfo",
        "reqMousePos",
        "getMouse",
        "setAForeground",
        "setABackground",
        "pkeyPlab",
        "deviceType",
        "codeSetInit",
        "set0DesSeq",
        "set1DesSeq",
        "set2DesSeq",
        "set3DesSeq",
        "setLrMargin",
        "setTbMargin",
        "bitImageRepeat",
        "bitImageNewline",
        "bitImageCarriageReturn",
        "colorNames",
        "defineBitImageRegion",
        "endBitImageRegion",
        "setColorBand",
        "setPageLength",
        "displayPcChar",
        "enterPcCharsetMode",
        "exitPcCharsetMode",
        "enterScancodeMode",
        "exitScancodeMode",
        "pcTermOptions",
        "scancodeEscape",
        "altScancodeEsc",
        "enterHorizontalHlMode",
        "enterLeftHlMode",
        "enterLowHlMode",
        "enterRightHlMode",
        "enterTopHlMode",
        "enterVerticalHlMode",
        "setAAttributes",
        "setPglenInch"
      ]
    };

    
    if (buffer.readInt16LE(offset) !== 0x11a) {
      throw new Error("Invalid magic number");
    }
    
    let sizes = {
      name: buffer.readInt16LE(offset += 2),
      boolean: buffer.readInt16LE(offset += 2),
      number: buffer.readInt16LE(offset += 2),
      string: buffer.readInt16LE(offset += 2),
      table: buffer.readInt16LE(offset += 2)
    }
    this.sizes = sizes;
    
    let names = buffer.toString("ascii", offset += 2, offset + sizes.name - 1).split("|");
    this.terminal = names[0];
    this.description = names[names.length - 1];
    this.aliases = names.slice(0, names.length - 1);
    offset += sizes.name;
    
    this.capabilities = {};
 
    for (let i = 0; i < Math.min(sizes.boolean, definitions.boolean.length); i++) {
      this.capabilities[definitions.boolean[i]] = Boolean(buffer.readInt8(offset + i));
    }
    offset += sizes.boolean;
    offset += offset % 2;
    
    for (let i = 0; i < Math.min(sizes.number, definitions.number.length); i++) {
      let number = buffer.readInt16LE(offset + (i * 2));
      // if (number !== -1) {
        this.capabilities[definitions.number[i]] = number;
      // }
    }
    offset += sizes.number * 2;
    offset += offset % 2;
    
    for (let i = 0; i < Math.min(sizes.string, definitions.string.length); i++) {
      let stringOffset = buffer.readInt16LE(offset + (i * 2));
      
      if (stringOffset !== -1) {
        let stringLength = 0;
        while (buffer[offset + (sizes.string * 2) + stringOffset + stringLength] !== 0) {
          stringLength++;
        }
        console.log(`${stringOffset} - ${stringLength}`)
        this.capabilities[definitions.string[i]] = buffer.toString("ascii", offset + (sizes.string * 2) + stringOffset, offset + (sizes.string * 2) + stringOffset + stringLength);
      } else {
        this.capabilities[definitions.string[i]] = "";
      }
    }
  }
}

module.exports = Terminfo;
